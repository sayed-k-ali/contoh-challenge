# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-test:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout current branch
      uses: actions/checkout@v2

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install nodejs packages
      run: npm install --silent

    - name: Run unit testing
      run: npm test

    - name: Run sequelize module to create database and migration
      run: |
        npx sequelize db:create
        npx sequelize db:migrate
      env:
        NODE_ENV: test
        POSTGRES_USER: ${{ vars.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
        POSTGRES_DB: ${{ vars.POSTGRES_DB }}

    - name: Run integration test
      run: npm run integration
      env:
        POSTGRES_USER: ${{ vars.POSTGRES_USER }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        POSTGRES_HOST: ${{ vars.POSTGRES_HOST }}
        POSTGRES_DB: ${{ vars.POSTGRES_DB }}
  
  deploy-vercel:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}

  # this is the deployment sample for VPS or compute engine instance
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Upload to VM
  #       uses: appleboy/scp-action@v0.1.4
  #       with:
  #         host: ${{ secrets.SSHHOST }}
  #         username: ${{ secrets.SSHUSER }}
  #         key: ${{ secrets.SSHKEY }}
  #         port: ${{ secrets.SSHPORT }}
  #         source: '.'
  #         target: ./latihan-cicd/
  #     - name: restart pm2 services
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{ secrets.SSHHOST }}
  #         username: ${{ secrets.SSHUSER }}
  #         key: ${{ secrets.SSHKEY }}
  #         port: ${{ secrets.SSHPORT }}
  #         script: |
  #           pm2 restart all
