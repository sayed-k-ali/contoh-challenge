# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm install --silent

    - name: Store the npm result to artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact
        path: .

  integration-test:
    runs-on: ubuntu-latest
    container: node:20
    needs: build

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Retrieve build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact
      - name: Run sequelize module to create database and migration
        run: |
          npx sequelize db:create
          npx sequelize db:migrate
        env:
          NODE_ENV: test
      - name: Run integration test
        run: npm run integration
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
      


  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Upload to VM
  #       uses: appleboy/scp-action@v0.1.4
  #       with:
  #         host: ${{ secrets.SSHHOST }}
  #         username: ${{ secrets.SSHUSER }}
  #         key: ${{ secrets.SSHKEY }}
  #         port: ${{ secrets.SSHPORT }}
  #         source: '.'
  #         target: ./latihan-cicd/
  #     - name: restart pm2 services
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{ secrets.SSHHOST }}
  #         username: ${{ secrets.SSHUSER }}
  #         key: ${{ secrets.SSHKEY }}
  #         port: ${{ secrets.SSHPORT }}
  #         script: |
  #           pm2 restart all
